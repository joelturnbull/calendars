= FlexMock 1.0.3 Released

FlexMock is a flexible mocking library for use in unit testing and
behavior specification in Ruby.  Release 1.0.0 is a minor release with
a few bug fixes.

== Changes in 1.0.3

=== Features

* Better error messages when a mock is called the incorrect number of
  times

* Better stack output when validations fail during teardown.

== Changes in 1.0.2

=== Bug Fixes

* Quick definitions now obey base class restrictions

== Changes in 1.0.1

=== Features

* Better Ruby 1.8 compatibility

== Changes in 1.0.0

=== Features

* Mocks may now have a base class that limits what methods may be
  mocked. This allows early detection of outdated mock setups when the
  methods in the class are refactored.

* Spy assertions are now allowed. The verification of the calling of
  mocked methods may now be done in the "then" portion of the test,
  after the code under test has been run. This allows for much more
  natural Given/When/Then style testing.

* A custom assert method (assert_spy_called) has been added to make
  spy assertions easy when using Test::Unit or MiniTest.

* An RSpec matcher (have_received) has been added to make spy
  assertions easy when using RSpec.

=== Bug Fixes

* Now correctly handling the mocking of meta-programmed methods.

* Using the documented +singleton_methods+ method.

* Accidently trying to partial mock a regular mock is now a no-op.

== What is FlexMock?

FlexMock is a flexible framework for creating mock object for testing.
When running unit tests, it is often desirable to use isolate the
objects being tested from the "real world" by having them interact
with simplified test objects. Sometimes these test objects simply
return values when called, other times they verify that certain
methods were called with particular arguments in a particular order.

FlexMock makes creating these test objects easy.

=== Features

* Easy integration with both Test::Unit and RSpec. Mocks created with the
  flexmock method are automatically verified at the end of the test or
  example.

* A fluent interface that allows mock behavior to be specified very
  easily.

* A "record mode" where an existing implementation can record its
  interaction with a mock for later validation against a new
  implementation.

* Easy mocking of individual methods in existing, non-mock objects.

* Easy mocking of chains of method calls.

* The ability to cause classes to instantiate test instances (instead of real
  instances) for the duration of a test.

=== Example

Suppose you had a Dog object that wagged a tail when it was happy.
Something like this:

  class Dog
    def initialize(a_tail)
      @tail = a_tail
    end
    def happy
      @tail.wag
    end
  end

To test the +Dog+ class without a real +Tail+ object (perhaps because
real +Tail+ objects activate servos in some robotic equipment), you
can do something like this:

  RSpec.configure do |config|
    config.mock_with :flexmock
  end

  describe Dog do
    it "wags its tail when happy" do
      tail = flexmock("tail")
      tail.should_receive(:wag).once
      dog = Dog.new(tail)
      dog.happy
    end
  end

FlexMock will automatically verify that the mocked tail object received the
message +wag+ exactly one time. If it doesn't, the test will not pass.

Here's the same thing using the new spy support:

  describe Dog do
    it "wags its tail when happy" do
      tail = flexmock("tail")
      dog = Dog.new(tail)
      dog.happy
      tail.should have_received(:wag)
    end
  end

This style works particularly well with the rspec-given library.

  require 'rspec/given'

  describe Dog do
    context "when the dog is happy" do
      Given(:tail) { flexmock(:on, Tail) }
      Given(:dog) { Dog.new(tail) }

      When { dog.happy }

      Then { tail.should have_received(:wag) }
    end
  end

See the FlexMock documentation at http://flexmock.rubyforge.org for details on
specifying arguments and return values on mocked methods, as well as a simple
technique for mocking tail objects when the Dog class creates the tail objects
directly.

== Availability

You can make sure you have the latest version with a quick RubyGems command:

  gem install flexmock    (you may need root/admin privileges)

You will find documentation at: http://flexmock.rubyforge.org.

-- Jim Weirich
